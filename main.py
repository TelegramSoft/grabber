import asyncio
import shutil

import settings
from pyrogram import Client, filters
from pyrogram.types import InputMediaPhoto, InputMediaVideo, Message

from utils import (get_username, check_for_phone, check_for_links,
                   stop_post_filter, vk_wall_post, get_vk_prefix,
                   get_prefix, remove_links, check_language)

app = Client(settings.SESSION_NAME, settings.API_ID, settings.API_HASH)
used_media_groups = []


async def forward_media(client: Client, message: Message):
    await asyncio.sleep(settings.BEFORE_SEND_TIMEOUT)

    text = ""
    entities = []
    streams = {}
    with_filter = False

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ entity
    if message.media_group_id:
        for msg in await message.get_media_group():
            if msg.caption:
                text = msg.caption
                entities = msg.caption_entities
                break
    elif message.video or message.photo:
        text = message.caption
        entities = message.caption_entities
    else:
        text = message.text
        entities = message.entities

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ, –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞
    if message.chat.username in settings.FILTER_INTEGRATION_GROUPS and (
            text.startswith("‚ùå") or text.startswith("–†–µ–∫–ª–∞–º–∞")):
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    if message.chat.username in settings.FILTER_INTEGRATION_GROUPS:
        try:
            if message.from_user.username not in settings.FILTER_BOT_USERNAMES:
                return
        except AttributeError:
            return
        with_filter = True

    username = await get_username(message, entities, with_filter)

    if username in settings.NOT_SEND_MESSAGE_FROM:
        return

    if settings.ONLY:
        if not hasattr(message.from_user, "username"):
            return
        if message.from_user.username not in settings.ONLY_FROM:
            return

    try:
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {message.chat.title}...")
    except AttributeError:
        print(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
    if not await check_for_phone(text, entities) and settings.PHONE_FILTER:
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞...")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫–∏
    if await check_for_links(entities):
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫–∏...")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—à–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    if not await stop_post_filter(text):
        print("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞...")
        return
    if not await check_language(text):
        print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ...")
        return

    # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = await remove_links(text, entities)

    # –ï—Å–ª–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º - —É–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É '–ø–æ—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
    if message.chat.username in settings.FILTER_INTEGRATION_GROUPS:
        text = "\n".join([line for line in text.split("\n") if not line.startswith("üü¢")])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ–¥–∏–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –¢–ì
    if message.media_group_id:
        # –≠—Ç–æ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø–∞
        media_group = await client.get_media_group(message.chat.id, message.id)
        media_list = []
        for media in media_group:
            stream = await client.download_media(media, in_memory=True)
            stream.seek(0)
            if media.photo:
                # –≠—Ç–æ —Ñ–æ—Ç–æ
                if media.caption:
                    photo = InputMediaPhoto(media.photo.file_id,
                                            caption=await get_prefix(message.from_user, entities, with_filter) + text)
                else:
                    photo = InputMediaPhoto(media.photo.file_id, caption=media.caption)
                media_list.append(photo)
                streams[stream] = "photo"
            elif media.video:
                # –≠—Ç–æ –≤–∏–¥–µ–æ
                if media.caption:
                    video = InputMediaVideo(media.video.file_id,
                                            caption=await get_prefix(message.from_user, entities, with_filter) + text)
                else:
                    video = InputMediaVideo(media.video.file_id, caption=media.caption)
                media_list.append(video)
                streams[stream] = "video"
        for chat in settings.GROUPS_TO_SEND:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat}")
            await client.send_media_group(chat_id=chat, media=media_list)
    elif message.photo:
        # –≠—Ç–æ —Ñ–æ—Ç–æ
        for chat in settings.GROUPS_TO_SEND:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat}")
            if message.caption:
                await client.send_photo(chat_id=chat, photo=message.photo.file_id,
                                        caption=await get_prefix(message.from_user, entities, with_filter) + text)
            else:
                await client.send_photo(chat_id=chat, photo=message.photo.file_id,
                                        caption=text)
        stream = await client.download_media(message, in_memory=True)
        stream.seek(0)
        streams[stream] = "photo"
    elif message.video:
        # –≠—Ç–æ –≤–∏–¥–µ–æ
        for chat in settings.GROUPS_TO_SEND:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat}")
            if message.caption:
                await client.send_video(chat_id=chat, video=message.video.file_id,
                                        caption=await get_prefix(message.from_user, entities, with_filter) + text)
            else:
                await client.send_video(chat_id=chat, video=message.video.file_id, caption=text)
        stream = await client.download_media(message, in_memory=True)
        stream.seek(0)
        streams[stream] = "video"
    else:
        # –≠—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞
        for chat in settings.GROUPS_TO_SEND:
            print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ {chat}")
            await client.send_message(chat_id=chat,
                                      text=await get_prefix(message.from_user, entities, with_filter) + text)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –í–ö
    if settings.VK_REPOST and username not in settings.VK_NOT_SEND_MESSAGES_FROM:
        if text:
            vk_wall_post(message=get_vk_prefix(username) + text, streams=streams)
        else:
            vk_wall_post(message=get_vk_prefix(username), streams=streams)


@app.on_message(filters.chat(settings.GROUPS_TO_TAKE))
async def media_handler(client, message):
    global used_media_groups

    if message.media_group_id:
        if message.media_group_id in used_media_groups:
            return
        used_media_groups.append(message.media_group_id)

    await forward_media(client, message)


def main():
    app.run()


if __name__ == '__main__':
    main()
